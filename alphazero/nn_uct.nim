# Voy a escribir al mismo tiempo el uct comun y el nn_uct
import math
import random
import madelinette
import redalphazero
import std/sequtils
import std/tables
randomize()
type
    Uct_config = object
        iteraciones:int
        cte:float

    Alphazero_config = object
        #Por que tanta cte
        c_base:float
        c_init:float
    Train_config = object
        epoch : int
        buffer_size:int
        train_iteration:int
        max_error : float
        iteraciones:int
        alfa:float
        regularization_cte:float 
        regularization:bool

    NodeUCT = ref object
        #Quien debe jugar
        estado:Juego
        to_play:int
        prior:float
        puntos:float
        visitas:float
        parent:NodeUCT
        accion:Move
        posibles_acciones:seq[Move]
        hijos:seq[NodeUCT]

    NodeAlphaZero = ref object
        estado:Juego
        to_play:int
        prior:float
        puntos:float
        visitas:float
        parent:NodeAlphaZero
        accion:Move
        hijos:Table[Move,NodeAlphaZero]
    
    Jugada = object
        estado : Juego
        accion : Move
    
    History = object
        jugadas : seq[Jugada]


proc agregar(historia:var History,jugadas:seq[Jugada])=
    historia.jugadas=historia.jugadas.concat(jugadas)
proc `$`*(x:NodeAlphaZero):string=
    var s = "Nodo:{ \n" & "juego: "& $x.estado
    s &= "hijo: " & $x.hijos.len & "}"
    s

proc valueQAlpha(node:NodeAlphaZero):float=
    if node.visitas == 0:
        return 0.0
    else:
        return node.puntos/node.visitas
proc value_uct(v:NodeUCT,visits_padre:float,cte:float):float=
    v.puntos/v.visitas + cte * sqrt(2 * ln(visits_padre)/v.visitas)
proc value_ucb(v:NodeAlphaZero,visits_padre:float,az_config:Alphazero_config):float=
    var pb_c= ln((visits_padre+az_config.c_base+1)/az_config.c_base)+az_config.c_init
    pb_c *= sqrt(visits_padre)/(v.visitas + 1)
    let prior_score=v.prior*pb_c
    let value_score=v.valueQAlpha()
    return prior_score + value_score
proc otroJugador(p:int):int=
    if p==1: 2 else: 1
proc esTerminal(node:NodeUCT):bool=
    let (final,x)=endGame(node.estado.tablero,1)
    final
proc esTerminal_nn(node:NodeAlphaZero):bool=
    let (final,x)=endGame(node.estado.tablero,1)
    final
proc fully_expanded(node:NodeUCT):bool=
    node.posibles_acciones.len==0
proc expanded(node:NodeAlphaZero):bool=
    node.hijos.len>0
proc newAlphazero_config(c_base,c_init:float):Alphazero_config=
    Alphazero_config(c_base:c_base,c_init:c_init)

proc newNodeUCTAlpha(estado:Juego,parent:NodeAlphaZero,accion:Move,prior:float):NodeAlphaZero=  
    NodeAlphaZero(estado:estado,to_play:estado.player_actual,prior:prior,puntos:0.0,visitas:0.0,parent:parent, accion:accion)
proc newNodeUCT(estado:Juego,parent:NodeUCT,accion:Move):NodeUCT=
    var mvs=moves(estado.player_actual,estado.tablero)
    NodeUCT(estado:estado,to_play:estado.player_actual,prior:0.0,puntos:0.0,visitas:0.0,parent:parent, hijos: @[],accion:accion,posibles_acciones:mvs)
proc expand(node:var NodeUCT):NodeUCT=
    if node.posibles_acciones.len == 1:
        #Esta tambien
        let m = node.posibles_acciones[0]
        var j = copyJuego(node.estado)
        applymove(j.player_actual,j.tablero,m)
        let otro=otroJugador(j.player_actual)
        j.player_actual = otro
        #Esta linea cambia nomas
        node.posibles_acciones = @[]
        let hijo = newNodeUCT(j,node,m)
        node.hijos.add(hijo)
        return hijo 

    let idx=rand(node.posibles_acciones.len-1)

    if idx == 0:
        #Esta tambien
        let m = node.posibles_acciones[0]
        var j = copyJuego(node.estado)
        applymove(j.player_actual,j.tablero,m)
        let otro=otroJugador(j.player_actual)
        j.player_actual = otro
        #Esta linea cambia nomas
        node.posibles_acciones = node.posibles_acciones[1..node.posibles_acciones.len-1]
        let hijo = newNodeUCT(j,node,m)
        node.hijos.add(hijo)
        return hijo 
    else:
        #Esta tambien
        let m = node.posibles_acciones[idx]
        var j = copyJuego(node.estado)
        applymove(j.player_actual,j.tablero,m)
        let otro=otroJugador(j.player_actual)
        j.player_actual = otro
        let slice_1=node.posibles_acciones[0..idx-1]
        let slice_2=node.posibles_acciones[idx+1..node.posibles_acciones.len-1]
        #Esta linea cambia nomas
        node.posibles_acciones = slice_1 & slice_2
        let hijo = newNodeUCT(j,node,m)
        node.hijos.add(hijo)
        return hijo 
proc evaluate(nodo:var NodeAlphaZero,nn:RedNBN2)=
    let policy_pred=nn.predict_alphazero(nodo.estado.tablero.to_vec_player(nodo.estado.player_actual))
    var prior_table=initTable[Move,float]()
    var suma=0.0
    let mvs=moves(nodo.to_play,nodo.estado.tablero)
    for m in mvs:
        let p = exp(policy_pred[maxIndex(m.mv)])
        prior_table[m]=p
        suma += p
    for a,p in prior_table.pairs:
        let j=Juego(tablero:getTablero(nodo.estado.player_actual,nodo.estado.tablero,a),player_actual: if nodo.estado.player_actual==1: 2 else: 1)
        nodo.hijos[a] = newNodeUCTAlpha(j,nodo,a,p/suma)
proc best_child(v:NodeUCT,uct_config:Uct_config):NodeUCT=

    var mejor_hijo=v.hijos[0]
    var mejor_puntos=v.hijos[0].value_uct(v.visitas,uct_config.cte)
    for h_i in countup(1,v.hijos.len-1,1):
        let puntos=v.hijos[h_i].value_uct(v.visitas,uct_config.cte)
        if puntos>=mejor_puntos:
            mejor_puntos=puntos
            mejor_hijo=v.hijos[h_i]
    mejor_hijo
proc best_child_nn(v:NodeAlphaZero,az_config:Alphazero_config):NodeAlphaZero=
    var mejor_hijo:NodeAlphaZero=nil
    var mejor_puntos = -Inf
    for a,h in v.hijos.pairs:
        let score = h.value_ucb(v.visitas,az_config)
        if score >= mejor_puntos:
            mejor_puntos=score
            mejor_hijo = h
    mejor_hijo
proc tree_policy(n:NodeUCT,uct_config:Uct_config):NodeUCT=
    var v = n
    
    while not v.esTerminal():
        
        if not v.fully_expanded():
            
            return v.expand()
        else:
            return best_child(v,uct_config)
    v
proc tree_policy_nn(n:var NodeAlphaZero,az_config:Alphazero_config,nn:RedNBN2):NodeAlphaZero=
    var v = n
    
    while not v.esTerminal_nn():
        
        if not v.expanded():
            evaluate(v,nn)
            #Esta expandido v
            return v
        else:
            v = best_child_nn(v,az_config)
            
    v

proc default_policy(v:NodeUCT,player:int):int=
    var juego=v.estado
    while not endGame(juego.tablero,player)[0]:
        let mvs= moves(juego.player_actual,juego.tablero)
        let m=mvs[rand(mvs.len-1)]
        applymove(juego.player_actual,juego.tablero,m)
        if juego.player_actual==1:
            juego.player_actual=2
        else:
            juego.player_actual=1
    endGame(juego.tablero,player)[1]
proc default_policy_nn(v:NodeAlphaZero,player:int):int=
    var juego=v.estado
    while not endGame(juego.tablero,player)[0]:
        let mvs= moves(juego.player_actual,juego.tablero)
        let m=mvs[rand(mvs.len-1)]
        applymove(juego.player_actual,juego.tablero,m)
        if juego.player_actual==1:
            juego.player_actual=2
        else:
            juego.player_actual=1
    endGame(juego.tablero ,player)[1]
proc backup(v:var NodeUCT,res_final:int)=
    var n=v
    var puntos=   res_final.toFloat 
    while not isNil(n):
        n.visitas += 1
        n.puntos += puntos
        puntos *= - 1
        n=n.parent
proc backup_nn(v:var NodeAlphaZero,res_final:int)=
    var n=v
    var puntos=   res_final.toFloat #* (if player==1:1 else: -1)
    while not isNil(n):
        n.visitas += 1
        n.puntos += puntos
        puntos *= - 1
        n=n.parent
proc uct(juego:Juego,uct_config:Uct_config,player:int):Move=
    var root = newNodeUCT(juego,nil,nil)
    for i in countup(1,uct_config.iteraciones,1):
        var nodo = tree_policy(root,uct_config)
        var res_final= default_policy(nodo,player)
        backup(nodo,res_final)
    best_child(root,uct_config).accion
proc rnd_move(juego:Juego):Move=
    let mvs= moves(juego.player_actual,juego.tablero)
    let m=mvs[rand(mvs.len-1)]
    m

proc add_noise(nodo:NodeAlphaZero)=
    for a in nodo.hijos.keys:
        let p= nodo.hijos[a].prior
        if p < 0.01:
            nodo.hijos[a].prior += rand(0.05)

# El predict
proc nn_uct(juego:Juego,nn:RedNBN2,uct_config:Uct_config,az_config:Alphazero_config,player:int):Move=
    var root  = newNodeUCTAlpha(juego,nil,nil,0)
    evaluate(root,nn)

    add_noise(root)
    #Por cada nuevo nodo, hago una evaluacion del estado, expando y le asigno el ucb score
    for _ in countup(1,uct_config.iteraciones,1):
        #Capaz tenga algo distinto
        var nodo= tree_policy_nn(root,az_config,nn)
        var res_final=default_policy_nn(nodo,player)
        backup_nn(nodo,res_final)
    var mejor_hijo:NodeAlphaZero=nil
    var mejor_puntos = -Inf
    for a,h in root.hijos.pairs:
        let score = h.visitas
        if score >= mejor_puntos:
            mejor_puntos=score
            mejor_hijo = h
    mejor_hijo.accion


proc play()=
    var j = newJuego()
    var m:Move=nil
    let uct_config = Uct_config(iteraciones:500,cte:sqrt(2.0)/2)
    let mc_player=1
    let rnd_player= if mc_player == 1 : 2 else: 1
    while not endGame(j.tablero,1)[0]:
        echo j
        if j.player_actual==mc_player:
            #m=rnd_move(j)
            m= uct(j,uct_config,mc_player)
            applymove(j.player_actual,j.tablero,m)
            j.player_actual=rnd_player
        else:
            m=rnd_move(j)
            applymove(j.player_actual,j.tablero,m)
            j.player_actual=mc_player
        let idx=maxIndex(m.mv)
        echo "( " & $(idx div 9) & ", " & $(idx mod 9) & ")"
#Debo crear la red
proc play_nn()=
    var j = newJuego()
    var m:Move=nil
    let az_config = Alphazero_config(c_base:19652,c_init:1.25)
    let uct_config= Uct_config(iteraciones:500,cte:sqrt(2.0)/2)
    let nn_config = @[
        @[27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[28,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[29,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[30,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[31,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[32,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[33,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[34,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[35,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[36,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[37,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[38,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[39,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[40,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[41,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[42,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[43,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[44,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[45,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[46,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[47,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[48,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[49,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[50,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[51,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[52,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[53,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[54,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[55,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[56,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[57,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[58,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[59,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[60,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[61,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[62,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[63,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[64,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[65,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[66,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[67,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[68,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[69,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[70,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[71,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[72,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[73,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[74,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[75,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[76,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[77,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[78,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[79,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[80,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[81,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[82,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[83,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[84,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[85,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[86,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[87,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[88,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[89,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[90,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[91,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[92,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[93,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[94,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[95,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[96,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[97,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[98,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[99,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[100,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[101,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[102,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[103,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[104,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[105,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[106,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[107,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],        
    ]
    let nn_output = @[
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107
    ]
    let nn_player=1
    let rnd_player= if nn_player == 1 : 2 else: 1
    let nn=newRedNBN2(27,nn_config,nn_output,relu,der_relu)
    while not endGame(j.tablero,1)[0]:
        echo j
        if j.player_actual==nn_player:
            #m=rnd_move(j)
            m= nn_uct(j,nn,uct_config,az_config,nn_player)
            applymove(j.player_actual,j.tablero,m)
            j.player_actual=rnd_player
        else:
            m=rnd_move(j)
            applymove(j.player_actual,j.tablero,m)
            j.player_actual=nn_player
        let idx=maxIndex(m.mv)
        echo "( " & $(idx div 9) & ", " & $(idx mod 9) & ")"          
proc stats_play(iter:int)=
    var mct_win=0.0
    var rnd_win=0.0
    for i in countup(0,iter-1,1):
        var j = newJuego()
        var m:Move=nil
        let az_config = Alphazero_config(c_base:19652,c_init:1.25)
        let uct_config= Uct_config(iteraciones:50,cte:sqrt(2.0)/2)
        let nn_config = @[
        @[27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[28,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[29,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[30,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[31,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[32,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[33,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[34,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[35,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[36,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[37,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[38,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[39,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[40,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[41,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[42,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[43,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[44,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[45,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[46,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[47,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[48,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[49,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[50,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[51,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[52,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[53,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[54,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[55,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[56,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[57,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[58,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[59,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[60,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[61,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[62,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[63,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[64,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[65,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[66,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[67,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[68,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[69,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[70,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[71,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[72,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[73,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[74,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[75,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[76,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[77,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[78,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[79,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[80,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[81,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[82,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[83,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[84,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[85,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[86,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[87,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[88,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[89,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[90,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[91,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[92,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[93,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[94,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[95,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[96,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[97,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[98,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[99,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[100,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[101,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[102,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[103,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[104,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[105,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[106,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[107,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],        
        ]
        let nn_output = @[
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107
        ]
        let nn=newRedNBN2(27,nn_config,nn_output,relu,der_relu)
        let mc_player=2
        let rnd_player= if mc_player == 1 : 2 else: 1
        while not endGame(j.tablero,1)[0]:
            if j.player_actual==mc_player:
                m= nn_uct(j,nn,uct_config,az_config,mc_player)
                applymove(j.player_actual,j.tablero,m)
                j.player_actual=rnd_player
            else:
                m=rnd_move(j)
                applymove(j.player_actual,j.tablero,m)
                j.player_actual=mc_player
        if j.player_actual==mc_player:
            rnd_win += 1
        else:
            mct_win += 1
    let suma = mct_win + rnd_win
    echo "mc: " & $(mct_win/suma)
    echo "rnd: " & $(rnd_win/suma)

proc play_game(nn:RedNBN2,uct_config:Uct_config,az_config:Alphazero_config):seq[Jugada]=
    var j = newJuego()
    var m:Move=nil
    var jugadas:seq[Jugada] = @[]
    while not endGame(j.tablero,1)[0]:
        if j.player_actual==1:
            m= nn_uct(j,nn,uct_config,az_config,1)
            applymove(j.player_actual,j.tablero,m)
            j.player_actual=2
        else:
            m=nn_uct(j,nn,uct_config,az_config,2)
            applymove(j.player_actual,j.tablero,m)
            j.player_actual=1
        jugadas.add(Jugada(estado:j,accion:m))
    jugadas

proc fit(red:var RedNBN2,his:History,train_config:Train_config):float=
    var inputs:seq[seq[float]] = @[]
    var outputs:seq[seq[float]] = @[]
    for i in countup(1,train_config.buffer_size,1):
        let jug=his.jugadas[rand(his.jugadas.len-1)]
        let inp=to_vec_player(jug.estado.tablero,jug.estado.player_actual)
        inputs.add(inp)
        outputs.add(jug.accion.mv)
    learn_gr_alphazero(red,train_config.iteraciones,train_config.alfa,train_config.max_error,inputs,outputs,train_config.regularization_cte,train_config.regularization,false)
    
#Programa principal para aprender
proc nn_uct_train(tran_config:Train_config,uct_config:Uct_config,alpha_zero:Alphazero_config,dummies:int,nn_config:seq[seq[int]],nn_output:seq[int],activ=relu,der_activ=der_relu):(RedNBN2,float)=
    var historia=History(jugadas : @[])
    var red = newRedNBN2(dummies,nn_config,nn_output,activ,der_activ)
    var errors =0.0
    for _ in countup(1,tran_config.epoch,1):
        
        for _ in countup(1,tran_config.train_iteration,1):
            let jugadas = play_game(red,uct_config,alpha_zero)
            historia.agregar(jugadas)
        errors += fit(red,historia,tran_config)


    (red,errors)
proc play_train(iter=10)=
    let train_config=Train_config(
        epoch :2,
        buffer_size:2,
        train_iteration:2,
        max_error : 0.001,
        iteraciones:2,
        alfa:0.9,
        regularization_cte:0.0001 ,
        regularization:true
    )
    let az_config = Alphazero_config(c_base:19652,c_init:1.25)
    let uct_config= Uct_config(iteraciones:500,cte:sqrt(2.0)/2)
    let nn_config = @[
        @[27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[28,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[29,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[30,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[31,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[32,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[33,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[34,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[35,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[36,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[37,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[38,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[39,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[40,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[41,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[42,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[43,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[44,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[45,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[46,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[47,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[48,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[49,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[50,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[51,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[52,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[53,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[54,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[55,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[56,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[57,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[58,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[59,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[60,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[61,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[62,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[63,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[64,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[65,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[66,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[67,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[68,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[69,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[70,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[71,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[72,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[73,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[74,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[75,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[76,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[77,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[78,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[79,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[80,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[81,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[82,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[83,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[84,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[85,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[86,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[87,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[88,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[89,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[90,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[91,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[92,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[93,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[94,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[95,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[96,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[97,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[98,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[99,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[100,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[101,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[102,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[103,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[104,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[105,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[106,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
        @[107,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],        
    ]
    let nn_output = @[
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107
    ]
    let nn=newRedNBN2(27,nn_config,nn_output,relu,der_relu)
    echo "Sin entrenar"
    var mct_win=0.0
    var rnd_win=0.0
    for i in countup(0,iter-1,1):
        var j = newJuego()
        var m:Move=nil
        while not endGame(j.tablero,1)[0]:
            if j.player_actual==1:
                m= nn_uct(j,nn,uct_config,az_config,1)
                applymove(j.player_actual,j.tablero,m)
                j.player_actual=2
            else:
                m=rnd_move(j)
                applymove(j.player_actual,j.tablero,m)
                j.player_actual=1
        if j.player_actual==1:
            rnd_win += 1
        else:
            mct_win += 1
    var suma = mct_win + rnd_win
    echo "mc: " & $(mct_win/suma)
    echo "rnd: " & $(rnd_win/suma)
    var (red,errores)=nn_uct_train(train_config,uct_config,az_config,27,nn_config,nn_output,relu,der_relu)
    echo "DESPUES DE ENTRENAE"
    mct_win=0.0
    rnd_win=0.0
    for i in countup(0,iter-1,1):
        var j = newJuego()
        var m:Move=nil
        while not endGame(j.tablero,1)[0]:
            if j.player_actual==1:
                m= nn_uct(j,red,uct_config,az_config,1)
                applymove(j.player_actual,j.tablero,m)
                j.player_actual=2
            else:
                m=rnd_move(j)
                applymove(j.player_actual,j.tablero,m)
                j.player_actual=1
        if j.player_actual==1:
            rnd_win += 1
        else:
            mct_win += 1
    suma = mct_win + rnd_win
    echo "mc: " & $(mct_win/suma)
    echo "rnd: " & $(rnd_win/suma)
play_train(1)